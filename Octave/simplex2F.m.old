% Simplex fake base function
% Krystian Baran
# GNU Octave

function [x,v,optimal,C] = simplex2F(A,b,c)

% v = [A(base1), A(base2) ...]

# define M as big value
M = 1000;

# transform to column vector
[len,x] = size(b);
if len <= x; b = transpose(b); endif

[len,x] = size(c);
if len <= x; c = transpose(c); len = x; endif

# add fake base and define base
baseSize = length(b);
D = eye(baseSize);
A = [A D];
v = zeros(baseSize,1);
for i=1:baseSize
  c = [c; -M*D(i,i)];
  len = len + 1;
  v(i) = len;
endfor

# name variables
B = '';
C = '';
for i=1:len
  switch c(i)
    case 0
      C = [C ; 's', num2str(i)];
    case -M
      C = [C ; 'a', num2str(i)];
      B = [B ; 'a', num2str(i)];
    otherwise
      C = [C ; 'x', num2str(i)];
  endswitch
endfor

# set initial values and definition of helping variables
base = zeros(baseSize, 1);
for i=1:baseSize; base(i) = c(v(i)); endfor

z = zeros(len,1);
cz = zeros(len,1); # last row of simplex matrix defined ad c(i) - z(i)

head = 0; optimal = 0;
x = 0;  ix = 0;
y = 0;  iy = 0;

while(true)
    
    # calculate z, cz and optimal value
    for i=1:len
        z(i) = transpose(base) * A(:,i);
        cz(i) = c(i) - z(i);
    endfor
    optimal = transpose(base) * b;
    
    # check if max of last row is posive and break if not
    [x, ix] = max(cz);
    if x<=0
        break;
    endif
    
    # check min of last column and break if max is negative
    D = b./A(:,ix);
    if max(D)<=0; break; endif
    
    for i=1:length(D)
        if D(i)<0; D(i) = max(D)+1; endif
    endfor
    [y, iy] = min(D);
    base(iy,:) = c(ix,:);
    B(iy,:) = C(ix,:);
    v(iy) = ix;
    
    # check if fake base is in base and calls simplex on rest of matrix
    H = (v >= len-baseSize);
    if contains(H, 1)
    else
      D = length(A)-baseSize;
      [x,v,optimal,C] = simplex(A(:,1:len-baseSize),b,c(1:len-baseSize,:),v);
      return;
    endif
    
    # gaussian elimination for rest of A matrix
    head = A(iy,ix);
    A(iy,:) = A(iy,:) / head;
    b(iy,:) = b(iy,:) / head;
    for i=1:baseSize
        if i==iy; continue; endif
        head = A(i,ix);
        A(i,:) = A(i,:) - head*A(iy,:);
        b(i,:) = b(i,:) - head*b(iy,:);
    endfor
    
endwhile

# creates results vector
x = zeros(len,1);
for i=1:baseSize
    x(v(i)) = b(i);
endfor

endfunction